// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Appliscale/perun/logger (interfaces: LoggerInt)

// Package mocks is a generated GoMock package.
package mocks

import (
	logger "github.com/Appliscale/perun/logger"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLoggerInt is a mock of LoggerInt interface
type MockLoggerInt struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerIntMockRecorder
}

// MockLoggerIntMockRecorder is the mock recorder for MockLoggerInt
type MockLoggerIntMockRecorder struct {
	mock *MockLoggerInt
}

// NewMockLoggerInt creates a new mock instance
func NewMockLoggerInt(ctrl *gomock.Controller) *MockLoggerInt {
	mock := &MockLoggerInt{ctrl: ctrl}
	mock.recorder = &MockLoggerIntMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoggerInt) EXPECT() *MockLoggerIntMockRecorder {
	return m.recorder
}

// AddResourceForValidation mocks base method
func (m *MockLoggerInt) AddResourceForValidation(arg0 string) *logger.ResourceValidation {
	ret := m.ctrl.Call(m, "AddResourceForValidation", arg0)
	ret0, _ := ret[0].(*logger.ResourceValidation)
	return ret0
}

// AddResourceForValidation indicates an expected call of AddResourceForValidation
func (mr *MockLoggerIntMockRecorder) AddResourceForValidation(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResourceForValidation", reflect.TypeOf((*MockLoggerInt)(nil).AddResourceForValidation), arg0)
}

// Always mocks base method
func (m *MockLoggerInt) Always(arg0 string) {
	m.ctrl.Call(m, "Always", arg0)
}

// Always indicates an expected call of Always
func (mr *MockLoggerIntMockRecorder) Always(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Always", reflect.TypeOf((*MockLoggerInt)(nil).Always), arg0)
}

// Debug mocks base method
func (m *MockLoggerInt) Debug(arg0 string) {
	m.ctrl.Call(m, "Debug", arg0)
}

// Debug indicates an expected call of Debug
func (mr *MockLoggerIntMockRecorder) Debug(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLoggerInt)(nil).Debug), arg0)
}

// Error mocks base method
func (m *MockLoggerInt) Error(arg0 string) {
	m.ctrl.Call(m, "Error", arg0)
}

// Error indicates an expected call of Error
func (mr *MockLoggerIntMockRecorder) Error(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLoggerInt)(nil).Error), arg0)
}

// GetInput mocks base method
func (m *MockLoggerInt) GetInput(arg0 string, arg1 ...interface{}) error {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInput", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetInput indicates an expected call of GetInput
func (mr *MockLoggerIntMockRecorder) GetInput(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInput", reflect.TypeOf((*MockLoggerInt)(nil).GetInput), varargs...)
}

// HasValidationErrors mocks base method
func (m *MockLoggerInt) HasValidationErrors() bool {
	ret := m.ctrl.Call(m, "HasValidationErrors")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasValidationErrors indicates an expected call of HasValidationErrors
func (mr *MockLoggerIntMockRecorder) HasValidationErrors() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasValidationErrors", reflect.TypeOf((*MockLoggerInt)(nil).HasValidationErrors))
}

// Info mocks base method
func (m *MockLoggerInt) Info(arg0 string) {
	m.ctrl.Call(m, "Info", arg0)
}

// Info indicates an expected call of Info
func (mr *MockLoggerIntMockRecorder) Info(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLoggerInt)(nil).Info), arg0)
}

// PrintValidationErrors mocks base method
func (m *MockLoggerInt) PrintValidationErrors() {
	m.ctrl.Call(m, "PrintValidationErrors")
}

// PrintValidationErrors indicates an expected call of PrintValidationErrors
func (mr *MockLoggerIntMockRecorder) PrintValidationErrors() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintValidationErrors", reflect.TypeOf((*MockLoggerInt)(nil).PrintValidationErrors))
}

// SetVerbosity mocks base method
func (m *MockLoggerInt) SetVerbosity(arg0 string) {
	m.ctrl.Call(m, "SetVerbosity", arg0)
}

// SetVerbosity indicates an expected call of SetVerbosity
func (mr *MockLoggerIntMockRecorder) SetVerbosity(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVerbosity", reflect.TypeOf((*MockLoggerInt)(nil).SetVerbosity), arg0)
}

// Trace mocks base method
func (m *MockLoggerInt) Trace(arg0 string) {
	m.ctrl.Call(m, "Trace", arg0)
}

// Trace indicates an expected call of Trace
func (mr *MockLoggerIntMockRecorder) Trace(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockLoggerInt)(nil).Trace), arg0)
}

// Warning mocks base method
func (m *MockLoggerInt) Warning(arg0 string) {
	m.ctrl.Call(m, "Warning", arg0)
}

// Warning indicates an expected call of Warning
func (mr *MockLoggerIntMockRecorder) Warning(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warning", reflect.TypeOf((*MockLoggerInt)(nil).Warning), arg0)
}

// log mocks base method
func (m *MockLoggerInt) log(arg0 logger.Verbosity, arg1 string) {
	m.ctrl.Call(m, "log", arg0, arg1)
}

// log indicates an expected call of log
func (mr *MockLoggerIntMockRecorder) log(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "log", reflect.TypeOf((*MockLoggerInt)(nil).log), arg0, arg1)
}
